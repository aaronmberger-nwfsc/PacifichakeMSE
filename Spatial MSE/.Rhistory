Nin <-  Nsurvive*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
Nin
Nin/Nsurvive
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
Ntot
# N.save.age[nage, idx,space,season] <-  (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(1-movemat[space,nage, season])+
#   (N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage])*(movemat[spaceidx,nage, season]))# Plus group
#  #(N.save.age[nage-1, idx-1,space,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])+# Plus group
Nsurvive.plus <- (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))
Nout.plus <- Nsurvive.plus*(movemat[space,nage, season]) # Leaving
Nin.plus <- Nsurvive.plus*(movemat[spaceidx,nage, season]) # Incoming
Ntot.plus <- Nsurvive.plus- Nout.plus - Nin.plus
Nout.plus/Nsurvive.plus
plot(Nin)
# Save for the season and year
N.save.age[2:(nage-1),idx,space,season] <-Ntot
N.save.age[nage, idx,space,season] <- Ntot.plus
space <- 2
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if (season == 1){
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,1:(nage-2),season]) # Remove the ones that migrate
Nin <-  Nsurvive*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
# N.save.age[2:(nage-1),idx,space,season] <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])+
#   N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*t(movemat[spaceidx,1:(nage-2),season])# add the ones come to the surrounding areas
#N.save.age[1:(nage-2), idx-1,space,nseason]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season])+ # Remove the ones that leave``
# N.save.age[nage, idx,space,season] <-  (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(1-movemat[space,nage, season])+
#   (N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage])*(movemat[spaceidx,nage, season]))# Plus group
#  #(N.save.age[nage-1, idx-1,space,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])+# Plus group
Nsurvive.plus <- (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))
Nout.plus <- Nsurvive.plus*(movemat[space,nage, season]) # Leaving
Nin.plus <- Nsurvive.plus*(movemat[spaceidx,nage, season]) # Incoming
Ntot.plus <- Nsurvive.plus- Nout.plus - Nin.plus
# Save for the season and year
N.save.age[2:(nage-1),idx,space,season] <-Ntot
N.save.age[nage, idx,space,season] <- Ntot.plus
}else{
N.save.age[,idx,space,season] <- N.save.age[,idx,space,season-1]*exp(-Z)-
N.save.age[, idx,space,season-1]*exp(-Z)*(movemat[space,,season])+ # Remove the ones that leave
N.save.age[, idx,spaceidx,season-1]*exp(-Z)*(movemat[spaceidx,,season])# add the ones come to the surrounding areas
}
lines(Nout)
space
spaceidx
space <- 1
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,1:(nage-2),season]) # Remove the ones that migrate
Nin <-  Nsurvive*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
par(mfrow = c(2,1))
plot(Nin)
plot(Nout)
movemat
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
space <- 2
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if (season == 1){
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,1:(nage-2),season]) # Remove the ones that migrate
Nin <-  Nsurvive*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
}
lines(Nout)
space <- 1
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
season
dev.off()
space <- 1
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,2:(nage-1),season]) # Remove the ones that migrate
Nin <-  Nsurvive*movemat[spaceidx,2:(nage-1),season]# add the ones come to the surrounding areas
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
plot(Nin)
space <- 2
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,2:(nage-1),season]) # Remove the ones that migrate
Nin <-  Nsurvive*movemat[spaceidx,2:(nage-1),season]# add the ones come to the surrounding areas
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
lines(Nout)
space <- 1
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if (season == 1){
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,1:(nage-2),season]) # Remove the ones that migrate
Nin <-  Nsurvive*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
}
plot(Nin)
space
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,1:(nage-2),season]) # Remove the ones that migrate
Nin <-  Nsurvive*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
plot(Nout)
movemat
space <- 1
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*0*SDR^2+Ry)#*recruitmat[space]
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,1:(nage-2),season]) # Remove the ones that migrate
Nin <-  Nsurvive*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
space
plot(Nout)
space
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if (season == 1){
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,1:(nage-2),season]) # Remove the ones that migrate
Nin <-  N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
# N.save.age[2:(nage-1),idx,space,season] <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])+
#   N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*t(movemat[spaceidx,1:(nage-2),season])# add the ones come to the surrounding areas
#N.save.age[1:(nage-2), idx-1,space,nseason]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season])+ # Remove the ones that leave``
# N.save.age[nage, idx,space,season] <-  (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(1-movemat[space,nage, season])+
#   (N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage])*(movemat[spaceidx,nage, season]))# Plus group
#  #(N.save.age[nage-1, idx-1,space,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])+# Plus group
Nsurvive.plus <- (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))
Nout.plus <- Nsurvive.plus*(movemat[space,nage, season]) # Leaving
Nin.plus <- Nsurvive.plus*(movemat[spaceidx,nage, season]) # Incoming
Ntot.plus <- Nsurvive.plus- Nout.plus - Nin.plus
# Save for the season and year
N.save.age[2:(nage-1),idx,space,season] <-Ntot
N.save.age[nage, idx,space,season] <- Ntot.plus
}else{
N.save.age[,idx,space,season] <- N.save.age[,idx,space,season-1]*exp(-Z)-
N.save.age[, idx,space,season-1]*exp(-Z)*(movemat[space,,season])+ # Remove the ones that leave
N.save.age[, idx,spaceidx,season-1]*exp(-Z)*(movemat[spaceidx,,season])# add the ones come to the surrounding areas
}
space
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,1:(nage-2),season]) # Remove the ones that migrate
Nin <-  N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
Nout/Nsurvive
plot(Nout)
space <- 2
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)#*recruitmat[space]
N.save.age[1,idx,space,season] <- R
Nsurvive <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])
Nout <- Nsurvive*(movemat[space,1:(nage-2),season]) # Remove the ones that migrate
Nin <-  N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*movemat[spaceidx,1:(nage-2),season]# add the ones come to the surrounding areas
Ntot <- Nsurvive - Nout + Nin # Total number that stays in the areas
lines(Nin)
## Run a simple MSE based on subfunctions ###### Run the HAKE MSE #######
direc <- "~/GitHub/PacifichakeMSE/Spatial MSE"
setwd(direc)
###### Initialize the operating model ######
library(TMB)
compile("runHakeassessment2.cpp")
seedz <- 123
set.seed(seedz)
dyn.load(dynlib("runHakeassessment2"))
# Run the simulation model
source('run_agebased_model_true_seasons.R')
source('ylimits.R')
source('plotUncertainty.R')
source('getUncertainty.R')
source('SSB0calc.R')
source('getSelec.R')
source('load_data_seasons.R')
source('create_TMB_data.R')
source('SSB0calc.R')
source('getRefpoint.R')
assessment <- read.csv('asssessment_MLE.csv')
assessment <- assessment[assessment$year > 1965 &assessment$year < 2018 ,]
df <- load_data_seasons()
time <- 1
yrinit <- df$nyear
### Run the OM and the EM for x number of years in the MSE
### Set targets for harvesting etc
df$parms$initN <- df$parms$initN*0
df$parms$Rin <- df$parms$Rin*0
df$F0 <- 0*df$F0
simyears <- 50 # Project 30 years into the future
year.future <- c(df$years,(df$years[length(df$years)]+1):(df$years[length(df$years)]+simyears))
N0 <- NA
sim.data <- run.agebased.true_seasons(df)
simdata0 <- sim.data # The other one is gonna get overwritten.
plot(rowSums(sim.data$SSB)/sum(sim.data$SSB_0), type = 'l')
df$parms$initN
set.seed(seed)
nseason <- df$nseason
df$tEnd <- length(df$years)*nseason
nyear <-df$tEnd/df$nseason #
year <- df$years
tEnd <- nyear*nseason
# True values
M0 <- exp(df$parms$logMinit) # no difference between males and females
F0 <- df$F0
# Set up the data spatially
nspace <- df$nspace
recruitmat <- df$recruitmat
movemat <- df$movemat
move.init <- df$move.init
# M selectivity
Msel <- df$Msel # no difference between males and females
M0 <- exp(df$parms$logMinit)
M <- M0*Msel # Naural mortality at age
SDR <- 1.4
b <- rep(1, nyear)
# Survey selectivity
surv.sel <- getSelec(df$age,df$parms$psel_surv, df$Smin_survey, df$Smax_survey) # Constant over time
# Catchability
q <- exp(df$logQ) # Constant over time
surv.sd <- exp(df$parms$logSDsurv) # Survey error
# Maturity
Mat.sel <- df$Matsel # Fecundity
h <- exp(df$parms$logh)
# Age
nage <- df$nage
age <- df$age
R0 <- exp(df$parms$logRinit)
Mage <- cumsum(M)
# Calculate N0 based on R0
mage <- max(df$age) # Max age
agetmp <- 0:(mage*3)
nagetmp <- length(agetmp)
N0tmp <- rep(NA,nagetmp)
N0tmp[1:(nagetmp-1)] = R0*exp(-agetmp[1:(nagetmp-1)]*M0)
N0tmp[nagetmp] =  N0tmp[nagetmp-1]*exp(-agetmp[nagetmp-1]*M0)/(1-exp(-M0))
N0 <- matrix(NA,nage)
N0[1:(nage-1)] <- N0tmp[1:(nage-1)]
N0[nage] <- sum(N0tmp[nage:nagetmp])
SSB_0
N0
move.init
#SSB_0 <- rowSums(matrix(rep(N0,each =nspace),nrow = nspace)*matrix(rep(df$Matsel,each =nspace),nrow = nspace)*move.init)*0.5
SSB_0 <- df$Matsel*N0
SSB_0
plot(SSB_0)
movemat
dim(movemat)
movemat[,,1]
movemat[,,4]
move.init
dim(move.init)
M0
R0
dim(move.init)
#SSB_0 <- rowSums(matrix(rep(N0,each =nspace),nrow = nspace)*matrix(rep(df$Matsel,each =nspace),nrow = nspace)*move.init)*0.5
SSB_0 <- NA
for(i in 1:nspace){
SSB_0[i] <- df$Matsel*N0*move.init[i,]
}
#SSB_0 <- rowSums(matrix(rep(N0,each =nspace),nrow = nspace)*matrix(rep(df$Matsel,each =nspace),nrow = nspace)*move.init)*0.5
SSB_0 <- NA
for(i in 1:nspace){
SSB_0[i] <- sum(df$Matsel*N0*move.init[i,])
}
R_0 <- R0*move.init[,1]
SSB_0
source('~/GitHub/PacifichakeMSE/Spatial MSE/run_agebased_model_true_seasons.R')
simyears <- 50 # Project 30 years into the future
year.future <- c(df$years,(df$years[length(df$years)]+1):(df$years[length(df$years)]+simyears))
N0 <- NA
sim.data <- run.agebased.true_seasons(df)
simdata0 <- sim.data # The other one is gonna get overwritten.
plot(rowSums(sim.data$SSB)/sum(sim.data$SSB_0), type = 'l')
for(i in 1:nspace){
SSB_0[i] <- sum(df$Matsel*N0*move.init[i,])
}
R_0 <- R0*move.init[,1]
# Used the inital recruitment devs to get a start
Ninit <- rep(NA,nage)
Ninit_dev <- rev(df$parms$initN)
Ninit[2:(nage-1)] <-R0 * exp(-Mage[1:(nage-2)])*exp(-0.5*SDR^2*1+Ninit_dev[1:(nage-2)])
Ninit[nage] <- R0*exp(-(Mage[nage-1]))/(1-exp(-M[nage]))*exp(-0.5*SDR^2*1+Ninit_dev[nage-1])# Plus group (ignore recruitment dev's in first year )
# Create containers to save the data
SSB_init <- rowSums(matrix(rep(Ninit,each =nspace),nrow = nspace)*matrix(rep(df$Matsel,each =nspace),nrow = nspace)*move.init, na.rm = T)*0.5
Ninit[1] <- sum((4*h*R_0*SSB_init/(SSB_0*(1-h)+ SSB_init*(5*h-1)))*exp(-0.5*0*SDR^2+df$parms$Rin[1]))
SSB_init
SSB_0/SSB_init
SSB_0
#SSB_0 <- rowSums(matrix(rep(N0,each =nspace),nrow = nspace)*matrix(rep(df$Matsel,each =nspace),nrow = nspace)*move.init)*0.5
SSB_0 <- NA
for(i in 1:nspace){
SSB_0[i] <- sum(df$Matsel*N0*move.init[i,])
}
SSB_0
set.seed(seed)
nseason <- df$nseason
df$tEnd <- length(df$years)*nseason
nyear <-df$tEnd/df$nseason #
year <- df$years
tEnd <- nyear*nseason
# True values
M0 <- exp(df$parms$logMinit) # no difference between males and females
F0 <- df$F0
# Set up the data spatially
nspace <- df$nspace
recruitmat <- df$recruitmat
movemat <- df$movemat
move.init <- df$move.init
# M selectivity
Msel <- df$Msel # no difference between males and females
M0 <- exp(df$parms$logMinit)
M <- M0*Msel # Naural mortality at age
SDR <- 1.4
b <- rep(1, nyear)
# Survey selectivity
surv.sel <- getSelec(df$age,df$parms$psel_surv, df$Smin_survey, df$Smax_survey) # Constant over time
# Catchability
q <- exp(df$logQ) # Constant over time
surv.sd <- exp(df$parms$logSDsurv) # Survey error
# Maturity
Mat.sel <- df$Matsel # Fecundity
h <- exp(df$parms$logh)
# Age
nage <- df$nage
age <- df$age
R0 <- exp(df$parms$logRinit)
Mage <- cumsum(M)
# Calculate N0 based on R0
mage <- max(df$age) # Max age
agetmp <- 0:(mage*3)
nagetmp <- length(agetmp)
N0tmp <- rep(NA,nagetmp)
N0tmp[1:(nagetmp-1)] = R0*exp(-agetmp[1:(nagetmp-1)]*M0)
N0tmp[nagetmp] =  N0tmp[nagetmp-1]*exp(-agetmp[nagetmp-1]*M0)/(1-exp(-M0))
N0 <- matrix(NA,nage)
N0[1:(nage-1)] <- N0tmp[1:(nage-1)]
N0[nage] <- sum(N0tmp[nage:nagetmp])
#SSB_0 <- rowSums(matrix(rep(N0,each =nspace),nrow = nspace)*matrix(rep(df$Matsel,each =nspace),nrow = nspace)*move.init)*0.5
SSB_0 <- NA
for(i in 1:nspace){
SSB_0[i] <- sum(df$Matsel*N0*move.init[i,])
}
R_0 <- R0*move.init[,1]
SSB_0
source('~/GitHub/PacifichakeMSE/Spatial MSE/run_agebased_model_true_seasons.R')
## Run a simple MSE based on subfunctions ###### Run the HAKE MSE #######
direc <- "~/GitHub/PacifichakeMSE/Spatial MSE"
setwd(direc)
###### Initialize the operating model ######
library(TMB)
compile("runHakeassessment2.cpp")
seedz <- 123
set.seed(seedz)
dyn.load(dynlib("runHakeassessment2"))
# Run the simulation model
source('run_agebased_model_true_seasons.R')
source('ylimits.R')
source('plotUncertainty.R')
source('getUncertainty.R')
source('SSB0calc.R')
source('getSelec.R')
source('load_data_seasons.R')
source('create_TMB_data.R')
source('SSB0calc.R')
source('getRefpoint.R')
assessment <- read.csv('asssessment_MLE.csv')
assessment <- assessment[assessment$year > 1965 &assessment$year < 2018 ,]
df <- load_data_seasons()
time <- 1
yrinit <- df$nyear
### Run the OM and the EM for x number of years in the MSE
### Set targets for harvesting etc
df$parms$initN <- df$parms$initN*0
df$parms$Rin <- df$parms$Rin*0
df$F0 <- 0*df$F0
simyears <- 50 # Project 30 years into the future
year.future <- c(df$years,(df$years[length(df$years)]+1):(df$years[length(df$years)]+simyears))
N0 <- NA
sim.data <- run.agebased.true_seasons(df)
simdata0 <- sim.data # The other one is gonna get overwritten.
plot(rowSums(sim.data$SSB)/sum(sim.data$SSB_0), type = 'l')
