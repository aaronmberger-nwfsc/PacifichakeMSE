plot(reps$SSB)
lines(assessment$SSB)
plot(reps$Fyear)
plot(reps$Catch)
lines(catches.obs$Total)
plot(df$years[df$years > 1994],reps$Biomass[df$years > 1994]*1e-6, type = 'l', ylab = 'survey', xlab = 'years')
points(df$years[df$flag_survey == 1], df$survey[df$flag_survey == 1]*1e-6)
lower <- obj$par-Inf
#lower[names(lower) == 'PSEL'] <- -1
lower[names(lower) == 'logh'] <- 0
upper <- obj$par+Inf
#upper[names(upper) == 'PSEL' ] <- 1
# upper[names(upper) == 'Rin'] <- 3
upper[names(upper) == 'logh'] <- 1
#
#lower[which(names(lower)== 'F0')] <- 0.0001
# #lower['logh'] <- log(0.7)
# #upper[which(names(upper) == 'logMinit')] <- log(0.5)
#pper[which(names(upper) == 'logh')] <- log(0.9)
# upper[which(names(upper) == 'logRinit')] <- log(20)
# upper['logSDsurv'] = log(1)
# lower['logSDsurv'] = log(0.1)
#upper['logQ'] = log(1e-3)
system.time(opt<-nlminb(obj$par,obj$fn,obj$gr,lower=lower,upper=upper)) # If error one of the random effects is unused
rep<-sdreport(obj)
#rep
sdrep <- summary(rep)
rep.values<-rownames(sdrep)
unique(rep.values)
source('getUncertainty.R')
df$nyear <- length(years)
df$year <- years
SSB <- getUncertainty('SSB',df)
F0 <- getUncertainty('Fyear',df)
Catch <- getUncertainty('Catch',df)
N <- getUncertainty('N',df)
Biomass <- getUncertainty('Biomass',df)
R <- getUncertainty('R',df)
surveyselec.est <- getUncertainty('surveyselc', df)
catchselec.est <- getUncertainty('catchselec', df)
plotUncertainty(SSB, assessment$SSB)
exp(rep$par.fixed)[5]
sqrt(exp(rep$par.fixed)[5])
sqrt(1.4)
## Run a simple MSE based on subfunctions ###### Run the HAKE MSE #######
direc <- "C:/Users/Nis/Dropbox/NOAA/Hake MSE/Hake MSE space/"
setwd(direc)
###### Initialize the operating model ######
library(TMB)
compile("runHakeassessment2.cpp")
seedz <- 123
set.seed(seedz)
dyn.load(dynlib("runHakeassessment2"))
# Run the simulation model
source('run_agebased_model_true_seasons.R')
source('ylimits.R')
source('plotUncertainty.R')
source('getUncertainty.R')
source('SSB0calc.R')
source('getSelec.R')
source('load_data_seasons.R')
source('create_TMB_data.R')
source('SSB0calc.R')
source('getRefpoint.R')
assessment <- read.csv('asssessment_MLE.csv')
assessment <- assessment[assessment$year > 1965 &assessment$year < 2018 ,]
df <- load_data_seasons()
time <- 1
yrinit <- df$nyear
### Run the OM and the EM for x number of years in the MSE
### Set targets for harvesting etc
simyears <- 50 # Project 30 years into the future
year.future <- c(df$years,(df$years[length(df$years)]+1):(df$years[length(df$years)]+simyears))
N0 <- NA
sim.data <- run.agebased.true_seasons(df)
source('C:/Users/Nis/Dropbox/NOAA/Hake MSE/Hake MSE space/load_data_seasons.R')
## Run a simple MSE based on subfunctions ###### Run the HAKE MSE #######
direc <- "C:/Users/Nis/Dropbox/NOAA/Hake MSE/Hake MSE space/"
setwd(direc)
###### Initialize the operating model ######
library(TMB)
compile("runHakeassessment2.cpp")
seedz <- 123
set.seed(seedz)
dyn.load(dynlib("runHakeassessment2"))
# Run the simulation model
source('run_agebased_model_true_seasons.R')
source('ylimits.R')
source('plotUncertainty.R')
source('getUncertainty.R')
source('SSB0calc.R')
source('getSelec.R')
source('load_data_seasons.R')
source('create_TMB_data.R')
source('SSB0calc.R')
source('getRefpoint.R')
assessment <- read.csv('asssessment_MLE.csv')
assessment <- assessment[assessment$year > 1965 &assessment$year < 2018 ,]
df <- load_data_seasons()
dim(df$move.init)
dim(df$movemat)
time <- 1
yrinit <- df$nyear
simyears <- 50 # Project 30 years into the future
year.future <- c(df$years,(df$years[length(df$years)]+1):(df$years[length(df$years)]+simyears))
N0 <- NA
sim.data <- run.agebased.true_seasons(df)
nseason <- df$nseason
df$tEnd <- length(df$years)*nseason
nyear <-df$tEnd/df$nseason #
year <- df$years
tEnd <- nyear*nseason
# True values
M0 <- exp(df$parms$logMinit) # no difference between males and females
F0 <- df$F0
# Set up the data spatially
nspace <- df$nspace
recruitmat <- df$recruitmat
movemat <- df$movemat
move.init <- df$move.init
# M selectivity
Msel <- df$Msel # no difference between males and females
M0 <- exp(df$parms$logMinit)
M <- M0*Msel # Naural mortality at age
SDR <- 1.4
b <- rep(1, nyear)
# Survey selectivity
surv.sel <- getSelec(df$age,df$parms$psel_surv, df$Smin_survey, df$Smax_survey) # Constant over time
# Catchability
q <- exp(df$logQ) # Constant over time
surv.sd <- exp(df$parms$logSDsurv) # Survey error
# Maturity
Mat.sel <- df$Matsel # Fecundity
h <- exp(df$parms$logh)
# Age
nage <- df$nage
age <- df$age
R0 <- exp(df$parms$logRinit)
Mage <- cumsum(M)
# Calculate N0 based on R0
mage <- max(df$age) # Max age
agetmp <- 0:(mage*3)
nagetmp <- length(agetmp)
N0tmp <- rep(NA,nagetmp)
N0tmp[1:(nagetmp-1)] = R0*exp(-agetmp[1:(nagetmp-1)]*M0)
N0tmp[nagetmp] =  N0tmp[nagetmp-1]*exp(-agetmp[nagetmp-1]*M0)/(1-exp(-M0))
N0 <- matrix(NA,nage)
N0[1:(nage-1)] <- N0tmp[1:(nage-1)]
N0[nage] <- sum(N0tmp[nage:nagetmp])
SSB_0 <- rowSums(matrix(rep(N0,each =nspace),nrow = 2)*matrix(rep(df$Matsel,each =nspace),nrow = 2)*move.init)*0.5
R_0 <- R0*move.init[,1]
# Used the inital recruitment devs to get a start
nseason <- df$nseason
df$tEnd <- length(df$years)*nseason
nyear <-df$tEnd/df$nseason #
year <- df$years
tEnd <- nyear*nseason
# True values
M0 <- exp(df$parms$logMinit) # no difference between males and females
F0 <- df$F0
# Set up the data spatially
nspace <- df$nspace
recruitmat <- df$recruitmat
movemat <- df$movemat
move.init <- df$move.init
# M selectivity
Msel <- df$Msel # no difference between males and females
M0 <- exp(df$parms$logMinit)
M <- M0*Msel # Naural mortality at age
SDR <- 1.4
b <- rep(1, nyear)
# Survey selectivity
surv.sel <- getSelec(df$age,df$parms$psel_surv, df$Smin_survey, df$Smax_survey) # Constant over time
# Catchability
q <- exp(df$logQ) # Constant over time
surv.sd <- exp(df$parms$logSDsurv) # Survey error
# Maturity
Mat.sel <- df$Matsel # Fecundity
h <- exp(df$parms$logh)
# Age
nage <- df$nage
age <- df$age
R0 <- exp(df$parms$logRinit)
Mage <- cumsum(M)
# Calculate N0 based on R0
mage <- max(df$age) # Max age
agetmp <- 0:(mage*3)
nagetmp <- length(agetmp)
N0tmp <- rep(NA,nagetmp)
N0tmp[1:(nagetmp-1)] = R0*exp(-agetmp[1:(nagetmp-1)]*M0)
N0tmp[nagetmp] =  N0tmp[nagetmp-1]*exp(-agetmp[nagetmp-1]*M0)/(1-exp(-M0))
N0 <- matrix(NA,nage)
N0[1:(nage-1)] <- N0tmp[1:(nage-1)]
N0[nage] <- sum(N0tmp[nage:nagetmp])
SSB_0 <- rowSums(matrix(rep(N0,each =nspace),nrow = nspace)*matrix(rep(df$Matsel,each =nspace),nrow = nspace)*move.init)*0.5
R_0 <- R0*move.init[,1]
Ninit <- rep(NA,nage)
Ninit_dev <- rev(df$parms$initN)
Ninit[2:(nage-1)] <-R0 * exp(-Mage[1:(nage-2)])*exp(-0.5*SDR^2*1+Ninit_dev[1:(nage-2)])
Ninit[nage] <- R0*exp(-(Mage[nage-1]))/(1-exp(-M[nage]))*exp(-0.5*SDR^2*1+Ninit_dev[nage-1])# Plus group (ignore recruitment dev's in first year )
# Create containers to save the data
SSB_init <- rowSums(matrix(rep(Ninit,each =nspace),nrow = 2)*matrix(rep(df$Matsel,each =nspace),nrow = 2)*move.init, na.rm = T)*0.5
Ninit[1] <- sum((4*h*R_0*SSB_init/(SSB_0*(1-h)+ SSB_init*(5*h-1)))*exp(-0.5*0*SDR^2+df$parms$Rin[1]))
# Create containers to save the data
SSB_init <- rowSums(matrix(rep(Ninit,each =nspace),nrow = nspace)*matrix(rep(df$Matsel,each =nspace),nrow = nspace)*move.init, na.rm = T)*0.5
Ninit[1] <- sum((4*h*R_0*SSB_init/(SSB_0*(1-h)+ SSB_init*(5*h-1)))*exp(-0.5*0*SDR^2+df$parms$Rin[1]))
SSB <- matrix(NA,nyear+1, nspace)
Biomass.save <- matrix(NA,nyear+1, nspace)
Catch <- matrix(NA,nyear+1)
Catch.age <- matrix(NA,nage,nyear+1)
R.save <- matrix(NA,nyear+1, nspace)
N.save.age <- array(NA,dim = c(nage,nyear+1, nspace, nseason))
age_comps_surv <- array(NA, dim = c(df$age_maxage,nyear)) # Fix the max ages later
age_comps_catch <- array(NA, dim = c(df$age_maxage,nyear))
survey <- array(NA,dim = c(nyear))
# Distribute over space
for (space in 1:nspace){
for (season in 1:nseason){
if (season == 1){
N.save.age[,1,space,season] <- Ninit*move.init[space,] # Just to initialize
}else{
N.save.age[,1,space,season] <- N.save.age[,1,space,season-1]*exp(-M/nseason)
}
}
SSB[1,space] <- sum(N.save.age[,1,space,4]*Mat.sel, na.rm = T)*0.5
}
Catch.age[,1] <- 0 # Assumed no fishing before data started
Catch[1]<- 0
survey[1] <- 1 # Surveys start later
idx.save <- seq(1,tEnd, by = nseason)
for (yr in 1:(nyear)){ # Loop over years add one year for initial distribution
if(year[yr] < year[df$selYear] | year[yr] > 2017){
psel <- df$parms$psel_fish
}else{
psel <- df$parms$psel_fish+df$parms$PSEL[,yr-df$selYear+1]
}
Fsel <- getSelec(age,psel,df$Smin,df$Smax) # Constant over space right now
if(year[yr] < 2018){
w_catch <- df$wage_catch[,yr]
w_surv <- df$wage_survey[,yr]
}else{
w_catch <- df$wage_catch[,1]
w_surv <- df$wage_survey[,1]
}
if (year[yr] < 2018){
Ry <- df$parms$Rin[yr]
}else{
Ry <- rnorm(1,mean = 0, sd = SDR)
}
# for(ssn in 1:nseason){
idx <- yr+1 # Use this index to save beyond the initial condition
#idx.run <- yr+season
# print(idx)
# Calculate the mortality at length
Fyear <- F0[yr]*Fsel
Myear <- M # Natural mortality
for (season in 1:nseason){
Z <- (Fyear+Myear)/nseason
# Assume that recruitment is in the beginning of the year (bc why not)
# Recruitment
for (space in 1:nspace){
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if (season == 1){
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)*recruitmat[space]
N.save.age[1,idx,space,season] <- R
N.save.age[2:(nage-1),idx,space,season] <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])-
N.save.age[1:(nage-2), idx-1,space,nseason]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season])+ # Remove the ones that leave``
N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*(movemat[spaceidx,1:(nage-2),season])# add the ones come to the surrounding areas
N.save.age[nage, idx,space,season] <-  (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(1-movemat[space,nage, season])-
(N.save.age[nage-1, idx-1,space,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])+# Plus group
(N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])# Plus group
}else{
N.save.age[,idx,space,season] <- N.save.age[,idx,space,season-1]*exp(-Z)-
N.save.age[, idx,space,season-1]*exp(-Z)*(movemat[space,,season])+ # Remove the ones that leave
N.save.age[, idx,spaceidx,season-1]*exp(-Z)*(movemat[spaceidx,,season])# add the ones come to the surrounding areas
}
if (season==nseason){
SSB[idx,space] <- sum(N.save.age[,idx,space, nseason]*Mat.sel)*0.5
if(is.na(SSB[idx,space])){
stop('SSB is NA')
}
}
}
}
Catch.age[,idx]  <- (Fyear/(Fyear+Myear))*(1-exp(-(Fyear+Myear)))*rowSums(N.save.age[,idx,,1])*w_catch # Calculate the catch in kg
Catch[idx] <- sum(Catch.age[,idx])
#  }
# Save the survey
# Survey is conducted in the start of the year
if (df$flag_survey[yr] == 1){
err <- exp(rnorm(n = 1,mean = 0, sd = surv.sd))
surv <- sum(rowSums(N.save.age[,idx,,1])*surv.sel*q*w_surv)*err # If the xtra factor is not included the mean is > 1
survey[yr] <- surv
}else{
survey[yr] <- 1
}
Ntot.year <- rowSums(N.save.age[,idx,,1])
surv.tot <- sum(Ntot.year*surv.sel*q)
if(df$flag_survey[yr] == 1){
age_comps_surv[1,yr] <- 0 # No year 1 recorded
age_comps_surv[1:(df$age_maxage-1),yr] <-  (Ntot.year[2:(df$age_maxage)]*surv.sel[2:(df$age_maxage)]*q)/surv.tot
age_comps_surv[df$age_maxage,yr] <- sum(Ntot.year[(df$age_maxage+1):nage]*surv.sel[(df$age_maxage+1):nage]*q)/surv.tot
}else{
age_comps_surv[,yr] <- NA
}
#
if(df$flag_catch[yr] == 1){
age_comps_catch[1:(df$age_maxage-1),yr] <-  Catch.age[2:(df$age_maxage),yr]/Catch[yr]
age_comps_catch[df$age_maxage,yr] <- sum(Catch.age[(df$age_maxage+1):nage,yr]/Catch[yr])
}else{
age_comps_catch[,yr] <- NA
}
}
time
if(year[yr] < year[df$selYear] | year[yr] > 2017){
psel <- df$parms$psel_fish
}else{
psel <- df$parms$psel_fish+df$parms$PSEL[,yr-df$selYear+1]
}
Fsel <- getSelec(age,psel,df$Smin,df$Smax) # Constant over space right now
if(year[yr] < 2018){
w_catch <- df$wage_catch[,yr]
w_surv <- df$wage_survey[,yr]
}else{
w_catch <- df$wage_catch[,1]
w_surv <- df$wage_survey[,1]
}
if (year[yr] < 2018){
Ry <- df$parms$Rin[yr]
}else{
Ry <- rnorm(1,mean = 0, sd = SDR)
}
idx <- yr+1 # Use this index to save beyond the initial condition
#idx.run <- yr+season
# print(idx)
# Calculate the mortality at length
Fyear <- F0[yr]*Fsel
Myear <- M # Natural mortality
season <- 1
Z <- (Fyear+Myear)/nseason
for (space in 1:nspace){
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if (season == 1){
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)*recruitmat[space]
N.save.age[1,idx,space,season] <- R
N.save.age[2:(nage-1),idx,space,season] <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])-
N.save.age[1:(nage-2), idx-1,space,nseason]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season])+ # Remove the ones that leave``
N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*(movemat[spaceidx,1:(nage-2),season])# add the ones come to the surrounding areas
N.save.age[nage, idx,space,season] <-  (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(1-movemat[space,nage, season])-
(N.save.age[nage-1, idx-1,space,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])+# Plus group
(N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])# Plus group
}else{
N.save.age[,idx,space,season] <- N.save.age[,idx,space,season-1]*exp(-Z)-
N.save.age[, idx,space,season-1]*exp(-Z)*(movemat[space,,season])+ # Remove the ones that leave
N.save.age[, idx,spaceidx,season-1]*exp(-Z)*(movemat[spaceidx,,season])# add the ones come to the surrounding areas
}
if (season==nseason){
SSB[idx,space] <- sum(N.save.age[,idx,space, nseason]*Mat.sel)*0.5
if(is.na(SSB[idx,space])){
stop('SSB is NA')
}
}
}
space
spaceidx
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)*recruitmat[space]
N.save.age[1,idx,space,season] <- R
N.save.age[2:(nage-1),idx,space,season] <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])-
N.save.age[1:(nage-2), idx-1,space,nseason]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season])+ # Remove the ones that leave``
N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*(movemat[spaceidx,1:(nage-2),season])# add the ones come to the surrounding areas
N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*(movemat[spaceidx,1:(nage-2),season])
N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])
dim(N.save.age)
dim(      logSDR = log(1.4),
)
dim(N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)]))
dim((movemat[spaceidx,1:(nage-2),season]))
N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])
N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])
N.save.age[1:(nage-2), idx-1,space,nseason]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season])
N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*t(movemat[spaceidx,1:(nage-2),season])
rowSums(N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*t(movemat[spaceidx,1:(nage-2),season]))
source('C:/Users/Nis/Dropbox/NOAA/Hake MSE/Hake MSE space/run_agebased_model_true_seasons.R')
source('C:/Users/Nis/Dropbox/NOAA/Hake MSE/Hake MSE space/run_agebased_model_true_seasons.R')
source('C:/Users/Nis/Dropbox/NOAA/Hake MSE/Hake MSE space/run_agebased_model_true_seasons.R')
(N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage]))
(movemat[spaceidx,nage, season])
for (season in 1:nseason){
Z <- (Fyear+Myear)/nseason
# Assume that recruitment is in the beginning of the year (bc why not)
# Recruitment
for (space in 1:nspace){
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if (season == 1){
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)*recruitmat[space]
N.save.age[1,idx,space,season] <- R
N.save.age[2:(nage-1),idx,space,season] <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])-
N.save.age[1:(nage-2), idx-1,space,nseason]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season])+ # Remove the ones that leave``
rSums(N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*t(movemat[spaceidx,1:(nage-2),season]))# add the ones come to the surrounding areas
N.save.age[nage, idx,space,season] <-  (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(1-movemat[space,nage, season])-
(N.save.age[nage-1, idx-1,space,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])+# Plus group
rowSums((N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season]))# Plus group
}else{
N.save.age[,idx,space,season] <- N.save.age[,idx,space,season-1]*exp(-Z)-
N.save.age[, idx,space,season-1]*exp(-Z)*(movemat[space,,season])+ # Remove the ones that leave
N.save.age[, idx,spaceidx,season-1]*exp(-Z)*(movemat[spaceidx,,season])# add the ones come to the surrounding areas
}
if (season==nseason){
SSB[idx,space] <- sum(N.save.age[,idx,space, nseason]*Mat.sel)*0.5
if(is.na(SSB[idx,space])){
stop('SSB is NA')
}
}
}
}
source('C:/Users/Nis/Dropbox/NOAA/Hake MSE/Hake MSE space/run_agebased_model_true_seasons.R')
source('C:/Users/Nis/Dropbox/NOAA/Hake MSE/Hake MSE space/run_agebased_model_true_seasons.R')
for (season in 1:nseason){
Z <- (Fyear+Myear)/nseason
# Assume that recruitment is in the beginning of the year (bc why not)
# Recruitment
for (space in 1:nspace){
# Get the indices for the surrounding spaces
if(((space-1) == 0)){
spaceidx <- 2
}
if(space == nspace){
spaceidx <- nspace-1
}
if(space > 1 & space < nspace){
spaceidx <- c(space-1,space+1)
}
if (season == 1){
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)*recruitmat[space]
N.save.age[1,idx,space,season] <- R
N.save.age[2:(nage-1),idx,space,season] <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])-
N.save.age[1:(nage-2), idx-1,space,nseason]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season])+ # Remove the ones that leave``
rowSums(N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*t(movemat[spaceidx,1:(nage-2),season]))# add the ones come to the surrounding areas
N.save.age[nage, idx,space,season] <-  (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(1-movemat[space,nage, season])-
(N.save.age[nage-1, idx-1,space,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])+# Plus group
rowSums((N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season]))# Plus group
}else{
N.save.age[,idx,space,season] <- N.save.age[,idx,space,season-1]*exp(-Z)-
N.save.age[, idx,space,season-1]*exp(-Z)*(movemat[space,,season])+ # Remove the ones that leave
N.save.age[, idx,spaceidx,season-1]*exp(-Z)*(movemat[spaceidx,,season])# add the ones come to the surrounding areas
}
if (season==nseason){
SSB[idx,space] <- sum(N.save.age[,idx,space, nseason]*Mat.sel)*0.5
if(is.na(SSB[idx,space])){
stop('SSB is NA')
}
}
}
}
# Recruitment only in season 1
R <- ((4*h*R_0[space]*SSB[idx-1,space])/
(SSB_0[space]*(1-h)+ SSB[idx-1,space]*(5*h-1)))*exp(-0.5*1*SDR^2+Ry)*recruitmat[space]
N.save.age[1,idx,space,season] <- R
N.save.age[2:(nage-1),idx,space,season] <- N.save.age[1:(nage-2), idx-1,space, nseason]*exp(-Z[1:(nage-2)])*(1-movemat[space,1:(nage-2),season])-
N.save.age[1:(nage-2), idx-1,space,nseason]*exp(-Z[1:(nage-2)])*(movemat[space,1:(nage-2),season])+ # Remove the ones that leave``
rowSums(N.save.age[1:(nage-2), idx-1,spaceidx,nseason]*exp(-Z[1:(nage-2)])*t(movemat[spaceidx,1:(nage-2),season]))# add the ones come to the surrounding areas
N.save.age[nage, idx,space,season] <-  (N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(1-movemat[space,nage, season])-
(N.save.age[nage-1, idx-1,space,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])+# Plus group
rowSums((N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season]))# Plus group
(N.save.age[nage-1, idx-1,space, nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(1-movemat[space,nage, season])
(N.save.age[nage-1, idx-1,space,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,space, nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])
(N.save.age[nage-1, idx-1,spaceidx,nseason]*exp(-Z[nage-1])+N.save.age[nage, idx-1,spaceidx,nseason]*exp(-Z[nage]))*(movemat[spaceidx,nage, season])
source('C:/Users/Nis/Dropbox/NOAA/Hake MSE/Hake MSE space/run_agebased_model_true_seasons.R')
time
idx
plot(N.save.age[,1,1,1])
plot(N.save.age[,1,1,1], log = ''y)
plot(N.save.age[,1,1,1], log = 'y
')'
plot(N.save.age[,1,1,1], log = 'y')
